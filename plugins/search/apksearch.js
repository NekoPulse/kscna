import fetch from 'node-fetch'
import { checkFileSize } from '../../lib/utils.js'

export const command = 'apksearch'
export const description = 'Buscar aplicaciones en Aptoide'
export const category = 'search'

export async function handler({ sock, message, args, chatId }) {
  if (args.length < 1) {
    return sock.sendMessage(chatId, { 
      text: 'üì± *Uso correcto:*\n/apksearch [nombre de la app]\n\n*Ejemplo:* /apksearch WhatsApp' 
    })
  }

  const query = args.join(' ')
  
  try {
    await sock.sendMessage(chatId, { 
      text: 'üîç Buscando aplicaciones en Aptoide...' 
    })
    
    const response = await fetch(`https://ws75.aptoide.com/api/7/apps/search/query=${encodeURIComponent(query)}/limit=3`)
    const data = await response.json()
    
    if (!data.datalist || !data.datalist.list || data.datalist.list.length === 0) {
      return sock.sendMessage(chatId, { 
        text: `‚ùå No se encontraron aplicaciones para: *${query}*\n\nüí° *Sugerencias:*\n‚Ä¢ Revisa la ortograf√≠a\n‚Ä¢ Usa t√©rminos m√°s generales\n‚Ä¢ Prueba en ingl√©s` 
      })
    }

    const apps = data.datalist.list.slice(0, 3) // Limitar a 3 resultados
    
    for (const [index, app] of apps.entries()) {
      const fileSize = app.size || 0
      const fileSizeMB = (fileSize / (1024 * 1024)).toFixed(2)
      const rating = app.stats?.rating?.avg || 0
      const downloads = app.stats?.downloads || 0
      
      // Formatear n√∫mero de descargas
      const formatDownloads = (num) => {
        if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`
        if (num >= 1000) return `${(num / 1000).toFixed(1)}K`
        return num.toString()
      }

      const resultText = `‚ï≠‚îÄ„Äå üì± APP ${index + 1}/3 „Äç
‚îÇ üè∑Ô∏è *Nombre:* ${app.name}
‚îÇ üì¶ *Package:* ${app.package}
‚îÇ ‚≠ê *Rating:* ${rating.toFixed(1)}/5.0
‚îÇ üì• *Downloads:* ${formatDownloads(downloads)}
‚îÇ üíæ *Tama√±o:* ${fileSizeMB} MB
‚îÇ üè™ *Store:* ${app.store?.name || 'Aptoide'}
‚îÇ üìã *Versi√≥n:* ${app.file?.vername || 'N/A'}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

${fileSize > 10 * 1024 * 1024 ? 
  '‚ö†Ô∏è *Archivo muy grande (>10MB)*\nNo se puede enviar por WhatsApp' : 
  '‚úÖ *Disponible para descarga*'}`

      const messageOptions = {
        text: resultText,
        contextInfo: {
          externalAdReply: {
            title: `üì± ${app.name}`,
            body: `‚≠ê ${rating.toFixed(1)}/5 ‚Ä¢ üíæ ${fileSizeMB} MB ‚Ä¢ üì• ${formatDownloads(downloads)} downloads`,
            thumbnailUrl: app.icon || "https://rogddqelmxyuvhpjvxbf.supabase.co/storage/v1/object/public/files/apk-icon.png",
            sourceUrl: app.file?.path || `https://aptoide.com/search?q=${encodeURIComponent(app.name)}`,
            mediaType: 1,
            showAdAttribution: true,
            renderLargerThumbnail: false
          }
        }
      }

      await sock.sendMessage(chatId, messageOptions)

      // Si el archivo es descargable, enviarlo
      if (app.file?.path && fileSize <= 10 * 1024 * 1024) {
        try {
          const isValidSize = await checkFileSize(app.file.path, 10 * 1024 * 1024)
          if (isValidSize) {
            await sock.sendMessage(chatId, {
              text: `üì• *Descargando:* ${app.name}\n‚è≥ Por favor espera...`
            })
            
            await sock.sendMessage(chatId, {
              document: { url: app.file.path },
              fileName: `${app.name.replace(/[^\w\s]/gi, '')}_v${app.file?.vername || '1.0'}.apk`,
              mimetype: 'application/vnd.android.package-archive',
              contextInfo: {
                externalAdReply: {
                  title: `‚úÖ ${app.name} descargado`,
                  body: "Toca para instalar ‚Ä¢ ‚ö†Ô∏è Habilita fuentes desconocidas",
                  thumbnailUrl: app.icon,
                  sourceUrl: app.file.path,
                  mediaType: 1,
                  showAdAttribution: false
                }
              }
            })
          }
        } catch (downloadError) {
          console.error('Error descargando APK:', downloadError)
          await sock.sendMessage(chatId, { 
            text: `‚ùå *Error al descargar:* ${app.name}\nüîó Puedes descargarlo manualmente desde Aptoide` 
          })
        }
      }
    }

    // Mensaje final con bot√≥n de b√∫squeda web
    const finalMessage = {
      text: `üéâ *B√∫squeda completada para:* ${query}\n\nüí° *¬øNo encontraste lo que buscabas?*\n‚Ä¢ Prueba con otros t√©rminos\n‚Ä¢ Busca directamente en Aptoide\n‚Ä¢ Reporta si hay alg√∫n error\n\n‚ö†Ô∏è *Aviso de seguridad:* Solo se env√≠an archivos <10MB`,
      contextInfo: {
        externalAdReply: {
          title: "üåê Buscar en Aptoide Web",
          body: "Toca para abrir Aptoide en tu navegador",
          thumbnailUrl: "https://rogddqelmxyuvhpjvxbf.supabase.co/storage/v1/object/public/files/aptoide-logo.png",
          sourceUrl: `https://aptoide.com/search?q=${encodeURIComponent(query)}`,
          mediaType: 1,
          showAdAttribution: true,
          renderLargerThumbnail: false
        }
      }
    }

    await sock.sendMessage(chatId, finalMessage)

  } catch (error) {
    console.error('Error en APKSearch:', error)
    await sock.sendMessage(chatId, { 
      text: `‚ùå *Error inesperado*\n\nüîß *Detalles t√©cnicos:*\n${error.message}\n\nüí¨ *Reporta este error:* /report Error en apksearch: ${error.message}` 
    })
  }
}